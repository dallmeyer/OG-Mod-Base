    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

(define POINTA (static-vector-meters 4462.1 13.734 -4912.1))
(define POINTB (static-vector-meters 4856.8 13.381 -5266.1))

    (defun runs-every-frame ()
      ;; (increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc

      ;; Sample code to turn jak pink whenever he's doing the jetboard hover glitch
      ;; (when *target* 
      ;;   (if (board-hovering?)
      ;;     (draw-pink *target*)
      ;;     (draw-normal *target*)
      ;;     )
      ;;   )

      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )

      (if (not (process-by-name "endless" *active-pool*))
        (process-spawn-function process :name "endless"
          (lambda :behavior process ()
            (stack-size-set! (-> self main-thread) 512)
            (loop
              (when (and *target* (cpad-pressed? 0 l2))
                (cond
                  ((focus-test? *target* pilot)
                    (let* ((tq (new 'stack 'transformq))
                          (v (the vehicle (handle->process (-> *target* pilot vehicle))))
                          (v-trans (-> v rbody state position))
                          )
                      (vector-! v-trans v-trans POINTB)
                      (vector+! v-trans v-trans POINTA)
                      (vector-copy! (-> tq trans) (-> *math-camera* trans))
                      (vector-! (-> tq trans) (-> tq trans) POINTB)
                      (vector+! (-> tq trans) (-> tq trans) POINTA)
                      (set-vector! (-> tq scale) 1.0 1.0 1.0 1.0)
                      (matrix->quaternion (-> tq quat) (-> *math-camera* inv-camera-rot))
                      (suspend)
                      (send-event *camera* 'teleport-to-transformq tq)
                      (vector-reset! (-> v rbody state ang-momentum))
                      (vector-copy! (-> *math-camera* trans) (-> tq trans))
                      (vector-copy! (-> *math-camera* prev-trans) (-> tq trans))
                      (vector-copy! (-> *math-camera* trans-other) (-> tq trans))
                      (vector-copy! (-> *camera-combiner* trans) (-> tq trans))
                      )
                    )
                  (else
                    (vector-! (-> *target* root trans) (-> *target* root trans) POINTB)
                    (vector+! (-> *target* root trans) (-> *target* root trans) POINTA)
                    (let ((tq (new 'stack 'transformq)))
                      (vector-copy! (-> tq trans) (-> *math-camera* trans))
                      (vector-! (-> tq trans) (-> tq trans) POINTB)
                      (vector+! (-> tq trans) (-> tq trans) POINTA)
                      (set-vector! (-> tq scale) 1.0 1.0 1.0 1.0)
                      (matrix->quaternion (-> tq quat) (-> *math-camera* inv-camera-rot))
                      (suspend)
                      (send-event *camera* 'teleport-to-transformq tq)
                      (vector-copy! (-> *math-camera* trans) (-> tq trans))
                      (vector-copy! (-> *math-camera* prev-trans) (-> tq trans))
                      (vector-copy! (-> *math-camera* trans-other) (-> tq trans))
                      (vector-copy! (-> *camera-combiner* trans) (-> tq trans))
                      )
                    )
                  )
                )
              (suspend)
              )
            )
          )
        )
      
      (none)
      )

    (defun runs-on-gem-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-task-close ()
    

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
