;;-*-Lisp-*-
(in-package goal)

;; name: projectile-h.gc
;; name in dgo: projectile-h
;; dgos: GAME

;; +++projectile-options
(defenum projectile-options
  :bitfield #t
  :type uint64
  (po0 0) ;; space wars fixed Y position -10m? idk
  (po1 1) ;; controls if we tween towards target-pos
  (po2 2) ;; unused?
  (po3 3) ;; unused?
  (po4 4) ;; controls if projectile impacts when touch-wall
  (po5 5) ;; unused?
  (po6 6) ;; unused?
  (po7 7) 
  (po8 8) ;; unused?
  (po9 9) ;; unused?
  (po10 10) ;; unused?
  (po11 11) ;; unused?
  (po12 12) ;; unused?
  (po13 13) ;; controls whether attack should inherit attacker-velocity
  (po14 14) ;; controls whether we use requested damage or default of 2.0
  (po15 15) ;; controls whether we use requested vehicle-damage-factor or default of 1.0
  (po16 16) ;; same as ^^ but for vehicle-impulse-factor
  (po17 17) ;; controls whether projectile makes impact (at all?)
  (po18 18) ;; controls whether we set invinc-time
  (po19 19) ;; controls whether we send attack-invinc or attack event
  (po20 20) ;; something specifically for v-scorp-shot?
  (po21 21) ;; unused?
  (po22 22) ;; unused?
  (po23 23) ;; unused?
  (po24 24) ;; unused?
  (po25 25) ;; unused?
  (po26 26) ;; unused?
  (po27 27) ;; unused?
  (po28 28) ;; unused?
  (po29 29) ;; unused?
  (po30 30) ;; unused?
  (po31 31) ;; unused?
  )
;; ---projectile-options


(declare-type projectile process)
(declare-type projectile-init-by-other-params structure)
(define-extern projectile-init-by-other (function projectile-init-by-other-params object :behavior projectile))

;; DECOMP BEGINS

(deftype projectile (process-drawable)
  ((parent                  (pointer process-drawable) :override)
   (root                    collide-shape-moving       :override)
   (starting-pos            vector                      :inline)
   (starting-dir            vector                      :inline)
   (target-pos              vector                      :inline)
   (base-target-pos         vector                      :inline)
   (pre-move-transv         vector                      :inline)
   (timeout                 time-frame)
   (spawn-time              time-frame)
   (options                 projectile-options)
   (last-target             handle)
   (notify-handle           handle)
   (owner-handle            handle)
   (ignore-handle           handle)
   (update-velocity         (function projectile none))
   (move                    (function projectile none))
   (pick-target             (function projectile none))
   (max-speed               float)
   (old-dist                float                       16)
   (old-dist-count          int32)
   (hits                    int32)
   (max-hits                int32)
   (tween                   float)
   (attack-mode             symbol)
   (attack-id               uint32)
   (damage                  float)
   (vehicle-damage-factor   float)
   (vehicle-impulse-factor  float)
   (charge-level            float)
   (sound-id                sound-id)
   (stop-speed              meters)
   (invinc-time             time-frame)
   (desired-target          handle)
   (desired-target-pos      vector                      :inline)
   )
  (:state-methods
    die
    dissipate
    impact
    moving
    )
  (:methods
    (projectile-method-24 (_type_) none)
    (projectile-method-25 (_type_) none)
    (projectile-method-26 (_type_) none)
    (projectile-method-27 (_type_) none)
    (play-impact-sound (_type_ projectile-options) none)
    (projectile-method-29 (_type_) none)
    (setup-collision! (_type_) none)
    (init-proj-settings! (_type_) none)
    (projectile-method-32 (_type_) none)
    (go-impact! (_type_) none)
    (projectile-method-34 (_type_) none)
    (proj-event-handler (_type_ process int symbol event-message-block) object)
    (handle-proj-hit! (_type_ process event-message-block) object)
    (deal-damage! (_type_ process event-message-block) symbol)
    (made-impact? (_type_) symbol)
    (projectile-method-39 (_type_) none)
    (projectile-method-40 (_type_) int)
    )
  )


(deftype projectile-init-by-other-params (structure)
  ((pos                     vector  :inline)
   (vel                     vector  :inline)
   (target-pos              vector  :inline)
   (target-handle           handle)
   (ent                     entity)
   (charge                  float)
   (attack-id               uint32)
   (options                 projectile-options)
   (notify-handle           handle)
   (owner-handle            handle)
   (ignore-handle           handle)
   (timeout                 time-frame)
   (damage                  float)
   (vehicle-damage-factor   float)
   (vehicle-impulse-factor  float)
   )
  )


(defun spawn-projectile ((proj-type type) (params projectile-init-by-other-params) (parent-proc-tree process-tree) (pool dead-pool))
  "Create a new process for a projectile of the given type."
  (process-spawn proj-type :runtime #t :name "projectile" :from pool :to parent-proc-tree :init projectile-init-by-other params)
  )

(deftype projectile-bounce (projectile)
  ((played-bounce-time  time-frame)
   (tumble-quat         quaternion  :inline)
   (gravity             float)
   )
  (:state-methods
    sitting
    )
  (:methods
    (projectile-bounce-method-42 (_type_) none)
    (projectile-bounce-method-43 (_type_) none)
    )
  )
